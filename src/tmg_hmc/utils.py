import numpy as np 
from cmath import sqrt, acos
from scipy.sparse import csc_matrix, csr_matrix
from torch import Tensor
# ignore runtime warning
np.seterr(divide='ignore', invalid='ignore')

Array = np.ndarray | Tensor

def sparsify(A: Array) -> Array:
    if isinstance(A, np.ndarray):
        return csc_matrix(A)
    elif isinstance(A, Tensor):
        return A.to_sparse_csc()
    
def to_scalar(x: Array) -> float:
    if isinstance(x, Tensor):
        return x.item()
    return x[0,0]

def arccos(x: float) -> float:
    val = acos(x)
    # if not np.isclose(val.imag, 0):
    #     return np.nan
    return val.real

def soln1(q1: float, q2: float, q3: float, q4: float, q5: float) -> float:
    return (-arccos(-0.5*(q1*q2 + q4*q5)/(q1**2 + q4**2) - 
         sqrt((q1*q2 + q4*q5)**2/(q1**2 + q4**2)**2 - 
            (2*(q2**2 + 2*q1*q3 - q4**2 + q5**2))/(3.*(q1**2 + q4**2)) + 
            (2**(1./3)*(-12*(q2*q3 - q4*q5)*(q1*q2 + q4*q5) + 
                 12*(q1**2 + q4**2)*(q3**2 - q5**2) + (q2**2 + 2*q1*q3 - q4**2 + q5**2)**2))/
             (3.*(q1**2 + q4**2)*(108*(q1**2 + q4**2)*(q2*q3 - q4*q5)**2 + 
                  108*(q1*q2 + q4*q5)**2*(q3**2 - q5**2) - 
                  36*(q2*q3 - q4*q5)*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) - 
                  72*(q1**2 + q4**2)*(q3**2 - q5**2)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) + 
                  2*(q2**2 + 2*q1*q3 - q4**2 + q5**2)**3 + 
                  sqrt(-4*(-12*(q2*q3 - q4*q5)*(q1*q2 + q4*q5) + 12*(q1**2 + q4**2)*(q3**2 - q5**2) + 
                        (q2**2 + 2*q1*q3 - q4**2 + q5**2)**2)**3 + 
                    (108*(q1**2 + q4**2)*(q2*q3 - q4*q5)**2 + 108*(q1*q2 + q4*q5)**2*(q3**2 - q5**2) - 
                       36*(q2*q3 - q4*q5)*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) - 
                       72*(q1**2 + q4**2)*(q3**2 - q5**2)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) + 
                       2*(q2**2 + 2*q1*q3 - q4**2 + q5**2)**3)**2))**(1./3)) + 
            (108*(q1**2 + q4**2)*(q2*q3 - q4*q5)**2 + 108*(q1*q2 + q4*q5)**2*(q3**2 - q5**2) - 
                36*(q2*q3 - q4*q5)*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) - 
                72*(q1**2 + q4**2)*(q3**2 - q5**2)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) + 
                2*(q2**2 + 2*q1*q3 - q4**2 + q5**2)**3 + 
                sqrt(-4*(-12*(q2*q3 - q4*q5)*(q1*q2 + q4*q5) + 12*(q1**2 + q4**2)*(q3**2 - q5**2) + 
                      (q2**2 + 2*q1*q3 - q4**2 + q5**2)**2)**3 + 
                  (108*(q1**2 + q4**2)*(q2*q3 - q4*q5)**2 + 108*(q1*q2 + q4*q5)**2*(q3**2 - q5**2) - 
                     36*(q2*q3 - q4*q5)*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) - 
                     72*(q1**2 + q4**2)*(q3**2 - q5**2)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) + 
                     2*(q2**2 + 2*q1*q3 - q4**2 + q5**2)**3)**2))**(1./3)/
             (3.*2**(1./3)*(q1**2 + q4**2)))/2. - 
         sqrt((2*(q1*q2 + q4*q5)**2)/(q1**2 + q4**2)**2 - 
            (4*(q2**2 + 2*q1*q3 - q4**2 + q5**2))/(3.*(q1**2 + q4**2)) - 
            (2**(1./3)*(-12*(q2*q3 - q4*q5)*(q1*q2 + q4*q5) + 
                 12*(q1**2 + q4**2)*(q3**2 - q5**2) + (q2**2 + 2*q1*q3 - q4**2 + q5**2)**2))/
             (3.*(q1**2 + q4**2)*(108*(q1**2 + q4**2)*(q2*q3 - q4*q5)**2 + 
                  108*(q1*q2 + q4*q5)**2*(q3**2 - q5**2) - 
                  36*(q2*q3 - q4*q5)*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) - 
                  72*(q1**2 + q4**2)*(q3**2 - q5**2)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) + 
                  2*(q2**2 + 2*q1*q3 - q4**2 + q5**2)**3 + 
                  sqrt(-4*(-12*(q2*q3 - q4*q5)*(q1*q2 + q4*q5) + 12*(q1**2 + q4**2)*(q3**2 - q5**2) + 
                        (q2**2 + 2*q1*q3 - q4**2 + q5**2)**2)**3 + 
                    (108*(q1**2 + q4**2)*(q2*q3 - q4*q5)**2 + 108*(q1*q2 + q4*q5)**2*(q3**2 - q5**2) - 
                       36*(q2*q3 - q4*q5)*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) - 
                       72*(q1**2 + q4**2)*(q3**2 - q5**2)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) + 
                       2*(q2**2 + 2*q1*q3 - q4**2 + q5**2)**3)**2))**(1./3)) - 
            (108*(q1**2 + q4**2)*(q2*q3 - q4*q5)**2 + 108*(q1*q2 + q4*q5)**2*(q3**2 - q5**2) - 
                36*(q2*q3 - q4*q5)*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) - 
                72*(q1**2 + q4**2)*(q3**2 - q5**2)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) + 
                2*(q2**2 + 2*q1*q3 - q4**2 + q5**2)**3 + 
                sqrt(-4*(-12*(q2*q3 - q4*q5)*(q1*q2 + q4*q5) + 12*(q1**2 + q4**2)*(q3**2 - q5**2) + 
                      (q2**2 + 2*q1*q3 - q4**2 + q5**2)**2)**3 + 
                  (108*(q1**2 + q4**2)*(q2*q3 - q4*q5)**2 + 108*(q1*q2 + q4*q5)**2*(q3**2 - q5**2) - 
                     36*(q2*q3 - q4*q5)*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) - 
                     72*(q1**2 + q4**2)*(q3**2 - q5**2)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) + 
                     2*(q2**2 + 2*q1*q3 - q4**2 + q5**2)**3)**2))**(1./3)/
             (3.*2**(1./3)*(q1**2 + q4**2)) - 
            ((-8*(q1*q2 + q4*q5)**3)/(q1**2 + q4**2)**3 + (16*(-(q2*q3) + q4*q5))/(q1**2 + q4**2) + 
               (8*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2))/(q1**2 + q4**2)**2)/
             (4.*sqrt((q1*q2 + q4*q5)**2/(q1**2 + q4**2)**2 - 
                 (2*(q2**2 + 2*q1*q3 - q4**2 + q5**2))/(3.*(q1**2 + q4**2)) + 
                 (2**(1./3)*(-12*(q2*q3 - q4*q5)*(q1*q2 + q4*q5) + 
                      12*(q1**2 + q4**2)*(q3**2 - q5**2) + (q2**2 + 2*q1*q3 - q4**2 + q5**2)**2))/
                  (3.*(q1**2 + q4**2)*(108*(q1**2 + q4**2)*(q2*q3 - q4*q5)**2 + 
                       108*(q1*q2 + q4*q5)**2*(q3**2 - q5**2) - 
                       36*(q2*q3 - q4*q5)*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) - 
                       72*(q1**2 + q4**2)*(q3**2 - q5**2)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) + 
                       2*(q2**2 + 2*q1*q3 - q4**2 + q5**2)**3 + 
                       sqrt(-4*(-12*(q2*q3 - q4*q5)*(q1*q2 + q4*q5) + 
                             12*(q1**2 + q4**2)*(q3**2 - q5**2) + (q2**2 + 2*q1*q3 - q4**2 + q5**2)**2)**3
                           + (108*(q1**2 + q4**2)*(q2*q3 - q4*q5)**2 + 
                            108*(q1*q2 + q4*q5)**2*(q3**2 - q5**2) - 
                            36*(q2*q3 - q4*q5)*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) - 
                            72*(q1**2 + q4**2)*(q3**2 - q5**2)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) + 
                            2*(q2**2 + 2*q1*q3 - q4**2 + q5**2)**3)**2))**(1./3)) + 
                 (108*(q1**2 + q4**2)*(q2*q3 - q4*q5)**2 + 108*(q1*q2 + q4*q5)**2*(q3**2 - q5**2) - 
                     36*(q2*q3 - q4*q5)*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) - 
                     72*(q1**2 + q4**2)*(q3**2 - q5**2)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) + 
                     2*(q2**2 + 2*q1*q3 - q4**2 + q5**2)**3 + 
                     sqrt(-4*(-12*(q2*q3 - q4*q5)*(q1*q2 + q4*q5) + 12*(q1**2 + q4**2)*(q3**2 - q5**2) + 
                           (q2**2 + 2*q1*q3 - q4**2 + q5**2)**2)**3 + 
                       (108*(q1**2 + q4**2)*(q2*q3 - q4*q5)**2 + 108*(q1*q2 + q4*q5)**2*(q3**2 - q5**2) - 
                          36*(q2*q3 - q4*q5)*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) - 
                          72*(q1**2 + q4**2)*(q3**2 - q5**2)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) + 
                          2*(q2**2 + 2*q1*q3 - q4**2 + q5**2)**3)**2))**(1./3)/
                  (3.*2**(1./3)*(q1**2 + q4**2)))))/2.))

def soln2(q1: float, q2: float, q3: float, q4: float, q5: float) -> float:
    return (arccos(-0.5*(q1*q2 + q4*q5)/(q1**2 + q4**2) - 
        sqrt((q1*q2 + q4*q5)**2/(q1**2 + q4**2)**2 - 
           (2*(q2**2 + 2*q1*q3 - q4**2 + q5**2))/(3.*(q1**2 + q4**2)) + 
           (2**(1./3)*(-12*(q2*q3 - q4*q5)*(q1*q2 + q4*q5) + 
                12*(q1**2 + q4**2)*(q3**2 - q5**2) + (q2**2 + 2*q1*q3 - q4**2 + q5**2)**2))/
            (3.*(q1**2 + q4**2)*(108*(q1**2 + q4**2)*(q2*q3 - q4*q5)**2 + 
                 108*(q1*q2 + q4*q5)**2*(q3**2 - q5**2) - 
                 36*(q2*q3 - q4*q5)*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) - 
                 72*(q1**2 + q4**2)*(q3**2 - q5**2)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) + 
                 2*(q2**2 + 2*q1*q3 - q4**2 + q5**2)**3 + 
                 sqrt(-4*(-12*(q2*q3 - q4*q5)*(q1*q2 + q4*q5) + 12*(q1**2 + q4**2)*(q3**2 - q5**2) + 
                       (q2**2 + 2*q1*q3 - q4**2 + q5**2)**2)**3 + 
                   (108*(q1**2 + q4**2)*(q2*q3 - q4*q5)**2 + 108*(q1*q2 + q4*q5)**2*(q3**2 - q5**2) - 
                      36*(q2*q3 - q4*q5)*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) - 
                      72*(q1**2 + q4**2)*(q3**2 - q5**2)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) + 
                      2*(q2**2 + 2*q1*q3 - q4**2 + q5**2)**3)**2))**(1./3)) + 
           (108*(q1**2 + q4**2)*(q2*q3 - q4*q5)**2 + 108*(q1*q2 + q4*q5)**2*(q3**2 - q5**2) - 
               36*(q2*q3 - q4*q5)*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) - 
               72*(q1**2 + q4**2)*(q3**2 - q5**2)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) + 
               2*(q2**2 + 2*q1*q3 - q4**2 + q5**2)**3 + 
               sqrt(-4*(-12*(q2*q3 - q4*q5)*(q1*q2 + q4*q5) + 12*(q1**2 + q4**2)*(q3**2 - q5**2) + 
                     (q2**2 + 2*q1*q3 - q4**2 + q5**2)**2)**3 + 
                 (108*(q1**2 + q4**2)*(q2*q3 - q4*q5)**2 + 108*(q1*q2 + q4*q5)**2*(q3**2 - q5**2) - 
                    36*(q2*q3 - q4*q5)*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) - 
                    72*(q1**2 + q4**2)*(q3**2 - q5**2)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) + 
                    2*(q2**2 + 2*q1*q3 - q4**2 + q5**2)**3)**2))**(1./3)/
            (3.*2**(1./3)*(q1**2 + q4**2)))/2. - 
        sqrt((2*(q1*q2 + q4*q5)**2)/(q1**2 + q4**2)**2 - 
           (4*(q2**2 + 2*q1*q3 - q4**2 + q5**2))/(3.*(q1**2 + q4**2)) - 
           (2**(1./3)*(-12*(q2*q3 - q4*q5)*(q1*q2 + q4*q5) + 
                12*(q1**2 + q4**2)*(q3**2 - q5**2) + (q2**2 + 2*q1*q3 - q4**2 + q5**2)**2))/
            (3.*(q1**2 + q4**2)*(108*(q1**2 + q4**2)*(q2*q3 - q4*q5)**2 + 
                 108*(q1*q2 + q4*q5)**2*(q3**2 - q5**2) - 
                 36*(q2*q3 - q4*q5)*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) - 
                 72*(q1**2 + q4**2)*(q3**2 - q5**2)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) + 
                 2*(q2**2 + 2*q1*q3 - q4**2 + q5**2)**3 + 
                 sqrt(-4*(-12*(q2*q3 - q4*q5)*(q1*q2 + q4*q5) + 12*(q1**2 + q4**2)*(q3**2 - q5**2) + 
                       (q2**2 + 2*q1*q3 - q4**2 + q5**2)**2)**3 + 
                   (108*(q1**2 + q4**2)*(q2*q3 - q4*q5)**2 + 108*(q1*q2 + q4*q5)**2*(q3**2 - q5**2) - 
                      36*(q2*q3 - q4*q5)*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) - 
                      72*(q1**2 + q4**2)*(q3**2 - q5**2)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) + 
                      2*(q2**2 + 2*q1*q3 - q4**2 + q5**2)**3)**2))**(1./3)) - 
           (108*(q1**2 + q4**2)*(q2*q3 - q4*q5)**2 + 108*(q1*q2 + q4*q5)**2*(q3**2 - q5**2) - 
               36*(q2*q3 - q4*q5)*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) - 
               72*(q1**2 + q4**2)*(q3**2 - q5**2)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) + 
               2*(q2**2 + 2*q1*q3 - q4**2 + q5**2)**3 + 
               sqrt(-4*(-12*(q2*q3 - q4*q5)*(q1*q2 + q4*q5) + 12*(q1**2 + q4**2)*(q3**2 - q5**2) + 
                     (q2**2 + 2*q1*q3 - q4**2 + q5**2)**2)**3 + 
                 (108*(q1**2 + q4**2)*(q2*q3 - q4*q5)**2 + 108*(q1*q2 + q4*q5)**2*(q3**2 - q5**2) - 
                    36*(q2*q3 - q4*q5)*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) - 
                    72*(q1**2 + q4**2)*(q3**2 - q5**2)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) + 
                    2*(q2**2 + 2*q1*q3 - q4**2 + q5**2)**3)**2))**(1./3)/
            (3.*2**(1./3)*(q1**2 + q4**2)) - 
           ((-8*(q1*q2 + q4*q5)**3)/(q1**2 + q4**2)**3 + (16*(-(q2*q3) + q4*q5))/(q1**2 + q4**2) + 
              (8*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2))/(q1**2 + q4**2)**2)/
            (4.*sqrt((q1*q2 + q4*q5)**2/(q1**2 + q4**2)**2 - 
                (2*(q2**2 + 2*q1*q3 - q4**2 + q5**2))/(3.*(q1**2 + q4**2)) + 
                (2**(1./3)*(-12*(q2*q3 - q4*q5)*(q1*q2 + q4*q5) + 
                     12*(q1**2 + q4**2)*(q3**2 - q5**2) + (q2**2 + 2*q1*q3 - q4**2 + q5**2)**2))/
                 (3.*(q1**2 + q4**2)*(108*(q1**2 + q4**2)*(q2*q3 - q4*q5)**2 + 
                      108*(q1*q2 + q4*q5)**2*(q3**2 - q5**2) - 
                      36*(q2*q3 - q4*q5)*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) - 
                      72*(q1**2 + q4**2)*(q3**2 - q5**2)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) + 
                      2*(q2**2 + 2*q1*q3 - q4**2 + q5**2)**3 + 
                      sqrt(-4*(-12*(q2*q3 - q4*q5)*(q1*q2 + q4*q5) + 12*(q1**2 + q4**2)*(q3**2 - q5**2) + 
                            (q2**2 + 2*q1*q3 - q4**2 + q5**2)**2)**3 + 
                        (108*(q1**2 + q4**2)*(q2*q3 - q4*q5)**2 + 
                           108*(q1*q2 + q4*q5)**2*(q3**2 - q5**2) - 
                           36*(q2*q3 - q4*q5)*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) - 
                           72*(q1**2 + q4**2)*(q3**2 - q5**2)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) + 
                           2*(q2**2 + 2*q1*q3 - q4**2 + q5**2)**3)**2))**(1./3)) + 
                (108*(q1**2 + q4**2)*(q2*q3 - q4*q5)**2 + 108*(q1*q2 + q4*q5)**2*(q3**2 - q5**2) - 
                    36*(q2*q3 - q4*q5)*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) - 
                    72*(q1**2 + q4**2)*(q3**2 - q5**2)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) + 
                    2*(q2**2 + 2*q1*q3 - q4**2 + q5**2)**3 + 
                    sqrt(-4*(-12*(q2*q3 - q4*q5)*(q1*q2 + q4*q5) + 12*(q1**2 + q4**2)*(q3**2 - q5**2) + 
                          (q2**2 + 2*q1*q3 - q4**2 + q5**2)**2)**3 + 
                      (108*(q1**2 + q4**2)*(q2*q3 - q4*q5)**2 + 108*(q1*q2 + q4*q5)**2*(q3**2 - q5**2) - 
                         36*(q2*q3 - q4*q5)*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) - 
                         72*(q1**2 + q4**2)*(q3**2 - q5**2)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) + 
                         2*(q2**2 + 2*q1*q3 - q4**2 + q5**2)**3)**2))**(1./3)/
                 (3.*2**(1./3)*(q1**2 + q4**2)))))/2.))

def soln3(q1: float, q2: float, q3: float, q4: float, q5: float) -> float:
    return (-arccos(-0.5*(q1*q2 + q4*q5)/(q1**2 + q4**2) - 
         sqrt((q1*q2 + q4*q5)**2/(q1**2 + q4**2)**2 - 
            (2*(q2**2 + 2*q1*q3 - q4**2 + q5**2))/(3.*(q1**2 + q4**2)) + 
            (2**(1./3)*(-12*(q2*q3 - q4*q5)*(q1*q2 + q4*q5) + 
                 12*(q1**2 + q4**2)*(q3**2 - q5**2) + (q2**2 + 2*q1*q3 - q4**2 + q5**2)**2))/
             (3.*(q1**2 + q4**2)*(108*(q1**2 + q4**2)*(q2*q3 - q4*q5)**2 + 
                  108*(q1*q2 + q4*q5)**2*(q3**2 - q5**2) - 
                  36*(q2*q3 - q4*q5)*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) - 
                  72*(q1**2 + q4**2)*(q3**2 - q5**2)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) + 
                  2*(q2**2 + 2*q1*q3 - q4**2 + q5**2)**3 + 
                  sqrt(-4*(-12*(q2*q3 - q4*q5)*(q1*q2 + q4*q5) + 12*(q1**2 + q4**2)*(q3**2 - q5**2) + 
                        (q2**2 + 2*q1*q3 - q4**2 + q5**2)**2)**3 + 
                    (108*(q1**2 + q4**2)*(q2*q3 - q4*q5)**2 + 108*(q1*q2 + q4*q5)**2*(q3**2 - q5**2) - 
                       36*(q2*q3 - q4*q5)*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) - 
                       72*(q1**2 + q4**2)*(q3**2 - q5**2)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) + 
                       2*(q2**2 + 2*q1*q3 - q4**2 + q5**2)**3)**2))**(1./3)) + 
            (108*(q1**2 + q4**2)*(q2*q3 - q4*q5)**2 + 108*(q1*q2 + q4*q5)**2*(q3**2 - q5**2) - 
                36*(q2*q3 - q4*q5)*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) - 
                72*(q1**2 + q4**2)*(q3**2 - q5**2)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) + 
                2*(q2**2 + 2*q1*q3 - q4**2 + q5**2)**3 + 
                sqrt(-4*(-12*(q2*q3 - q4*q5)*(q1*q2 + q4*q5) + 12*(q1**2 + q4**2)*(q3**2 - q5**2) + 
                      (q2**2 + 2*q1*q3 - q4**2 + q5**2)**2)**3 + 
                  (108*(q1**2 + q4**2)*(q2*q3 - q4*q5)**2 + 108*(q1*q2 + q4*q5)**2*(q3**2 - q5**2) - 
                     36*(q2*q3 - q4*q5)*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) - 
                     72*(q1**2 + q4**2)*(q3**2 - q5**2)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) + 
                     2*(q2**2 + 2*q1*q3 - q4**2 + q5**2)**3)**2))**(1./3)/
             (3.*2**(1./3)*(q1**2 + q4**2)))/2. + 
         sqrt((2*(q1*q2 + q4*q5)**2)/(q1**2 + q4**2)**2 - 
            (4*(q2**2 + 2*q1*q3 - q4**2 + q5**2))/(3.*(q1**2 + q4**2)) - 
            (2**(1./3)*(-12*(q2*q3 - q4*q5)*(q1*q2 + q4*q5) + 
                 12*(q1**2 + q4**2)*(q3**2 - q5**2) + (q2**2 + 2*q1*q3 - q4**2 + q5**2)**2))/
             (3.*(q1**2 + q4**2)*(108*(q1**2 + q4**2)*(q2*q3 - q4*q5)**2 + 
                  108*(q1*q2 + q4*q5)**2*(q3**2 - q5**2) - 
                  36*(q2*q3 - q4*q5)*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) - 
                  72*(q1**2 + q4**2)*(q3**2 - q5**2)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) + 
                  2*(q2**2 + 2*q1*q3 - q4**2 + q5**2)**3 + 
                  sqrt(-4*(-12*(q2*q3 - q4*q5)*(q1*q2 + q4*q5) + 12*(q1**2 + q4**2)*(q3**2 - q5**2) + 
                        (q2**2 + 2*q1*q3 - q4**2 + q5**2)**2)**3 + 
                    (108*(q1**2 + q4**2)*(q2*q3 - q4*q5)**2 + 108*(q1*q2 + q4*q5)**2*(q3**2 - q5**2) - 
                       36*(q2*q3 - q4*q5)*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) - 
                       72*(q1**2 + q4**2)*(q3**2 - q5**2)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) + 
                       2*(q2**2 + 2*q1*q3 - q4**2 + q5**2)**3)**2))**(1./3)) - 
            (108*(q1**2 + q4**2)*(q2*q3 - q4*q5)**2 + 108*(q1*q2 + q4*q5)**2*(q3**2 - q5**2) - 
                36*(q2*q3 - q4*q5)*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) - 
                72*(q1**2 + q4**2)*(q3**2 - q5**2)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) + 
                2*(q2**2 + 2*q1*q3 - q4**2 + q5**2)**3 + 
                sqrt(-4*(-12*(q2*q3 - q4*q5)*(q1*q2 + q4*q5) + 12*(q1**2 + q4**2)*(q3**2 - q5**2) + 
                      (q2**2 + 2*q1*q3 - q4**2 + q5**2)**2)**3 + 
                  (108*(q1**2 + q4**2)*(q2*q3 - q4*q5)**2 + 108*(q1*q2 + q4*q5)**2*(q3**2 - q5**2) - 
                     36*(q2*q3 - q4*q5)*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) - 
                     72*(q1**2 + q4**2)*(q3**2 - q5**2)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) + 
                     2*(q2**2 + 2*q1*q3 - q4**2 + q5**2)**3)**2))**(1./3)/
             (3.*2**(1./3)*(q1**2 + q4**2)) - 
            ((-8*(q1*q2 + q4*q5)**3)/(q1**2 + q4**2)**3 + (16*(-(q2*q3) + q4*q5))/(q1**2 + q4**2) + 
               (8*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2))/(q1**2 + q4**2)**2)/
             (4.*sqrt((q1*q2 + q4*q5)**2/(q1**2 + q4**2)**2 - 
                 (2*(q2**2 + 2*q1*q3 - q4**2 + q5**2))/(3.*(q1**2 + q4**2)) + 
                 (2**(1./3)*(-12*(q2*q3 - q4*q5)*(q1*q2 + q4*q5) + 
                      12*(q1**2 + q4**2)*(q3**2 - q5**2) + (q2**2 + 2*q1*q3 - q4**2 + q5**2)**2))/
                  (3.*(q1**2 + q4**2)*(108*(q1**2 + q4**2)*(q2*q3 - q4*q5)**2 + 
                       108*(q1*q2 + q4*q5)**2*(q3**2 - q5**2) - 
                       36*(q2*q3 - q4*q5)*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) - 
                       72*(q1**2 + q4**2)*(q3**2 - q5**2)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) + 
                       2*(q2**2 + 2*q1*q3 - q4**2 + q5**2)**3 + 
                       sqrt(-4*(-12*(q2*q3 - q4*q5)*(q1*q2 + q4*q5) + 
                             12*(q1**2 + q4**2)*(q3**2 - q5**2) + (q2**2 + 2*q1*q3 - q4**2 + q5**2)**2)**3
                           + (108*(q1**2 + q4**2)*(q2*q3 - q4*q5)**2 + 
                            108*(q1*q2 + q4*q5)**2*(q3**2 - q5**2) - 
                            36*(q2*q3 - q4*q5)*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) - 
                            72*(q1**2 + q4**2)*(q3**2 - q5**2)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) + 
                            2*(q2**2 + 2*q1*q3 - q4**2 + q5**2)**3)**2))**(1./3)) + 
                 (108*(q1**2 + q4**2)*(q2*q3 - q4*q5)**2 + 108*(q1*q2 + q4*q5)**2*(q3**2 - q5**2) - 
                     36*(q2*q3 - q4*q5)*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) - 
                     72*(q1**2 + q4**2)*(q3**2 - q5**2)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) + 
                     2*(q2**2 + 2*q1*q3 - q4**2 + q5**2)**3 + 
                     sqrt(-4*(-12*(q2*q3 - q4*q5)*(q1*q2 + q4*q5) + 12*(q1**2 + q4**2)*(q3**2 - q5**2) + 
                           (q2**2 + 2*q1*q3 - q4**2 + q5**2)**2)**3 + 
                       (108*(q1**2 + q4**2)*(q2*q3 - q4*q5)**2 + 108*(q1*q2 + q4*q5)**2*(q3**2 - q5**2) - 
                          36*(q2*q3 - q4*q5)*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) - 
                          72*(q1**2 + q4**2)*(q3**2 - q5**2)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) + 
                          2*(q2**2 + 2*q1*q3 - q4**2 + q5**2)**3)**2))**(1./3)/
                  (3.*2**(1./3)*(q1**2 + q4**2)))))/2.))

def soln4(q1: float, q2: float, q3: float, q4: float, q5: float) -> float:
    return (arccos(-0.5*(q1*q2 + q4*q5)/(q1**2 + q4**2) - 
        sqrt((q1*q2 + q4*q5)**2/(q1**2 + q4**2)**2 - 
           (2*(q2**2 + 2*q1*q3 - q4**2 + q5**2))/(3.*(q1**2 + q4**2)) + 
           (2**(1./3)*(-12*(q2*q3 - q4*q5)*(q1*q2 + q4*q5) + 
                12*(q1**2 + q4**2)*(q3**2 - q5**2) + (q2**2 + 2*q1*q3 - q4**2 + q5**2)**2))/
            (3.*(q1**2 + q4**2)*(108*(q1**2 + q4**2)*(q2*q3 - q4*q5)**2 + 
                 108*(q1*q2 + q4*q5)**2*(q3**2 - q5**2) - 
                 36*(q2*q3 - q4*q5)*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) - 
                 72*(q1**2 + q4**2)*(q3**2 - q5**2)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) + 
                 2*(q2**2 + 2*q1*q3 - q4**2 + q5**2)**3 + 
                 sqrt(-4*(-12*(q2*q3 - q4*q5)*(q1*q2 + q4*q5) + 12*(q1**2 + q4**2)*(q3**2 - q5**2) + 
                       (q2**2 + 2*q1*q3 - q4**2 + q5**2)**2)**3 + 
                   (108*(q1**2 + q4**2)*(q2*q3 - q4*q5)**2 + 108*(q1*q2 + q4*q5)**2*(q3**2 - q5**2) - 
                      36*(q2*q3 - q4*q5)*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) - 
                      72*(q1**2 + q4**2)*(q3**2 - q5**2)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) + 
                      2*(q2**2 + 2*q1*q3 - q4**2 + q5**2)**3)**2))**(1./3)) + 
           (108*(q1**2 + q4**2)*(q2*q3 - q4*q5)**2 + 108*(q1*q2 + q4*q5)**2*(q3**2 - q5**2) - 
               36*(q2*q3 - q4*q5)*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) - 
               72*(q1**2 + q4**2)*(q3**2 - q5**2)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) + 
               2*(q2**2 + 2*q1*q3 - q4**2 + q5**2)**3 + 
               sqrt(-4*(-12*(q2*q3 - q4*q5)*(q1*q2 + q4*q5) + 12*(q1**2 + q4**2)*(q3**2 - q5**2) + 
                     (q2**2 + 2*q1*q3 - q4**2 + q5**2)**2)**3 + 
                 (108*(q1**2 + q4**2)*(q2*q3 - q4*q5)**2 + 108*(q1*q2 + q4*q5)**2*(q3**2 - q5**2) - 
                    36*(q2*q3 - q4*q5)*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) - 
                    72*(q1**2 + q4**2)*(q3**2 - q5**2)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) + 
                    2*(q2**2 + 2*q1*q3 - q4**2 + q5**2)**3)**2))**(1./3)/
            (3.*2**(1./3)*(q1**2 + q4**2)))/2. + 
        sqrt((2*(q1*q2 + q4*q5)**2)/(q1**2 + q4**2)**2 - 
           (4*(q2**2 + 2*q1*q3 - q4**2 + q5**2))/(3.*(q1**2 + q4**2)) - 
           (2**(1./3)*(-12*(q2*q3 - q4*q5)*(q1*q2 + q4*q5) + 
                12*(q1**2 + q4**2)*(q3**2 - q5**2) + (q2**2 + 2*q1*q3 - q4**2 + q5**2)**2))/
            (3.*(q1**2 + q4**2)*(108*(q1**2 + q4**2)*(q2*q3 - q4*q5)**2 + 
                 108*(q1*q2 + q4*q5)**2*(q3**2 - q5**2) - 
                 36*(q2*q3 - q4*q5)*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) - 
                 72*(q1**2 + q4**2)*(q3**2 - q5**2)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) + 
                 2*(q2**2 + 2*q1*q3 - q4**2 + q5**2)**3 + 
                 sqrt(-4*(-12*(q2*q3 - q4*q5)*(q1*q2 + q4*q5) + 12*(q1**2 + q4**2)*(q3**2 - q5**2) + 
                       (q2**2 + 2*q1*q3 - q4**2 + q5**2)**2)**3 + 
                   (108*(q1**2 + q4**2)*(q2*q3 - q4*q5)**2 + 108*(q1*q2 + q4*q5)**2*(q3**2 - q5**2) - 
                      36*(q2*q3 - q4*q5)*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) - 
                      72*(q1**2 + q4**2)*(q3**2 - q5**2)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) + 
                      2*(q2**2 + 2*q1*q3 - q4**2 + q5**2)**3)**2))**(1./3)) - 
           (108*(q1**2 + q4**2)*(q2*q3 - q4*q5)**2 + 108*(q1*q2 + q4*q5)**2*(q3**2 - q5**2) - 
               36*(q2*q3 - q4*q5)*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) - 
               72*(q1**2 + q4**2)*(q3**2 - q5**2)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) + 
               2*(q2**2 + 2*q1*q3 - q4**2 + q5**2)**3 + 
               sqrt(-4*(-12*(q2*q3 - q4*q5)*(q1*q2 + q4*q5) + 12*(q1**2 + q4**2)*(q3**2 - q5**2) + 
                     (q2**2 + 2*q1*q3 - q4**2 + q5**2)**2)**3 + 
                 (108*(q1**2 + q4**2)*(q2*q3 - q4*q5)**2 + 108*(q1*q2 + q4*q5)**2*(q3**2 - q5**2) - 
                    36*(q2*q3 - q4*q5)*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) - 
                    72*(q1**2 + q4**2)*(q3**2 - q5**2)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) + 
                    2*(q2**2 + 2*q1*q3 - q4**2 + q5**2)**3)**2))**(1./3)/
            (3.*2**(1./3)*(q1**2 + q4**2)) - 
           ((-8*(q1*q2 + q4*q5)**3)/(q1**2 + q4**2)**3 + (16*(-(q2*q3) + q4*q5))/(q1**2 + q4**2) + 
              (8*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2))/(q1**2 + q4**2)**2)/
            (4.*sqrt((q1*q2 + q4*q5)**2/(q1**2 + q4**2)**2 - 
                (2*(q2**2 + 2*q1*q3 - q4**2 + q5**2))/(3.*(q1**2 + q4**2)) + 
                (2**(1./3)*(-12*(q2*q3 - q4*q5)*(q1*q2 + q4*q5) + 
                     12*(q1**2 + q4**2)*(q3**2 - q5**2) + (q2**2 + 2*q1*q3 - q4**2 + q5**2)**2))/
                 (3.*(q1**2 + q4**2)*(108*(q1**2 + q4**2)*(q2*q3 - q4*q5)**2 + 
                      108*(q1*q2 + q4*q5)**2*(q3**2 - q5**2) - 
                      36*(q2*q3 - q4*q5)*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) - 
                      72*(q1**2 + q4**2)*(q3**2 - q5**2)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) + 
                      2*(q2**2 + 2*q1*q3 - q4**2 + q5**2)**3 + 
                      sqrt(-4*(-12*(q2*q3 - q4*q5)*(q1*q2 + q4*q5) + 12*(q1**2 + q4**2)*(q3**2 - q5**2) + 
                            (q2**2 + 2*q1*q3 - q4**2 + q5**2)**2)**3 + 
                        (108*(q1**2 + q4**2)*(q2*q3 - q4*q5)**2 + 
                           108*(q1*q2 + q4*q5)**2*(q3**2 - q5**2) - 
                           36*(q2*q3 - q4*q5)*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) - 
                           72*(q1**2 + q4**2)*(q3**2 - q5**2)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) + 
                           2*(q2**2 + 2*q1*q3 - q4**2 + q5**2)**3)**2))**(1./3)) + 
                (108*(q1**2 + q4**2)*(q2*q3 - q4*q5)**2 + 108*(q1*q2 + q4*q5)**2*(q3**2 - q5**2) - 
                    36*(q2*q3 - q4*q5)*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) - 
                    72*(q1**2 + q4**2)*(q3**2 - q5**2)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) + 
                    2*(q2**2 + 2*q1*q3 - q4**2 + q5**2)**3 + 
                    sqrt(-4*(-12*(q2*q3 - q4*q5)*(q1*q2 + q4*q5) + 12*(q1**2 + q4**2)*(q3**2 - q5**2) + 
                          (q2**2 + 2*q1*q3 - q4**2 + q5**2)**2)**3 + 
                      (108*(q1**2 + q4**2)*(q2*q3 - q4*q5)**2 + 108*(q1*q2 + q4*q5)**2*(q3**2 - q5**2) - 
                         36*(q2*q3 - q4*q5)*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) - 
                         72*(q1**2 + q4**2)*(q3**2 - q5**2)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) + 
                         2*(q2**2 + 2*q1*q3 - q4**2 + q5**2)**3)**2))**(1./3)/
                 (3.*2**(1./3)*(q1**2 + q4**2)))))/2.))

def soln5(q1: float, q2: float, q3: float, q4: float, q5: float) -> float:
    return (-arccos(-0.5*(q1*q2 + q4*q5)/(q1**2 + q4**2) + 
         sqrt((q1*q2 + q4*q5)**2/(q1**2 + q4**2)**2 - 
            (2*(q2**2 + 2*q1*q3 - q4**2 + q5**2))/(3.*(q1**2 + q4**2)) + 
            (2**(1./3)*(-12*(q2*q3 - q4*q5)*(q1*q2 + q4*q5) + 
                 12*(q1**2 + q4**2)*(q3**2 - q5**2) + (q2**2 + 2*q1*q3 - q4**2 + q5**2)**2))/
             (3.*(q1**2 + q4**2)*(108*(q1**2 + q4**2)*(q2*q3 - q4*q5)**2 + 
                  108*(q1*q2 + q4*q5)**2*(q3**2 - q5**2) - 
                  36*(q2*q3 - q4*q5)*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) - 
                  72*(q1**2 + q4**2)*(q3**2 - q5**2)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) + 
                  2*(q2**2 + 2*q1*q3 - q4**2 + q5**2)**3 + 
                  sqrt(-4*(-12*(q2*q3 - q4*q5)*(q1*q2 + q4*q5) + 12*(q1**2 + q4**2)*(q3**2 - q5**2) + 
                        (q2**2 + 2*q1*q3 - q4**2 + q5**2)**2)**3 + 
                    (108*(q1**2 + q4**2)*(q2*q3 - q4*q5)**2 + 108*(q1*q2 + q4*q5)**2*(q3**2 - q5**2) - 
                       36*(q2*q3 - q4*q5)*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) - 
                       72*(q1**2 + q4**2)*(q3**2 - q5**2)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) + 
                       2*(q2**2 + 2*q1*q3 - q4**2 + q5**2)**3)**2))**(1./3)) + 
            (108*(q1**2 + q4**2)*(q2*q3 - q4*q5)**2 + 108*(q1*q2 + q4*q5)**2*(q3**2 - q5**2) - 
                36*(q2*q3 - q4*q5)*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) - 
                72*(q1**2 + q4**2)*(q3**2 - q5**2)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) + 
                2*(q2**2 + 2*q1*q3 - q4**2 + q5**2)**3 + 
                sqrt(-4*(-12*(q2*q3 - q4*q5)*(q1*q2 + q4*q5) + 12*(q1**2 + q4**2)*(q3**2 - q5**2) + 
                      (q2**2 + 2*q1*q3 - q4**2 + q5**2)**2)**3 + 
                  (108*(q1**2 + q4**2)*(q2*q3 - q4*q5)**2 + 108*(q1*q2 + q4*q5)**2*(q3**2 - q5**2) - 
                     36*(q2*q3 - q4*q5)*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) - 
                     72*(q1**2 + q4**2)*(q3**2 - q5**2)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) + 
                     2*(q2**2 + 2*q1*q3 - q4**2 + q5**2)**3)**2))**(1./3)/
             (3.*2**(1./3)*(q1**2 + q4**2)))/2. - 
         sqrt((2*(q1*q2 + q4*q5)**2)/(q1**2 + q4**2)**2 - 
            (4*(q2**2 + 2*q1*q3 - q4**2 + q5**2))/(3.*(q1**2 + q4**2)) - 
            (2**(1./3)*(-12*(q2*q3 - q4*q5)*(q1*q2 + q4*q5) + 
                 12*(q1**2 + q4**2)*(q3**2 - q5**2) + (q2**2 + 2*q1*q3 - q4**2 + q5**2)**2))/
             (3.*(q1**2 + q4**2)*(108*(q1**2 + q4**2)*(q2*q3 - q4*q5)**2 + 
                  108*(q1*q2 + q4*q5)**2*(q3**2 - q5**2) - 
                  36*(q2*q3 - q4*q5)*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) - 
                  72*(q1**2 + q4**2)*(q3**2 - q5**2)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) + 
                  2*(q2**2 + 2*q1*q3 - q4**2 + q5**2)**3 + 
                  sqrt(-4*(-12*(q2*q3 - q4*q5)*(q1*q2 + q4*q5) + 12*(q1**2 + q4**2)*(q3**2 - q5**2) + 
                        (q2**2 + 2*q1*q3 - q4**2 + q5**2)**2)**3 + 
                    (108*(q1**2 + q4**2)*(q2*q3 - q4*q5)**2 + 108*(q1*q2 + q4*q5)**2*(q3**2 - q5**2) - 
                       36*(q2*q3 - q4*q5)*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) - 
                       72*(q1**2 + q4**2)*(q3**2 - q5**2)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) + 
                       2*(q2**2 + 2*q1*q3 - q4**2 + q5**2)**3)**2))**(1./3)) - 
            (108*(q1**2 + q4**2)*(q2*q3 - q4*q5)**2 + 108*(q1*q2 + q4*q5)**2*(q3**2 - q5**2) - 
                36*(q2*q3 - q4*q5)*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) - 
                72*(q1**2 + q4**2)*(q3**2 - q5**2)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) + 
                2*(q2**2 + 2*q1*q3 - q4**2 + q5**2)**3 + 
                sqrt(-4*(-12*(q2*q3 - q4*q5)*(q1*q2 + q4*q5) + 12*(q1**2 + q4**2)*(q3**2 - q5**2) + 
                      (q2**2 + 2*q1*q3 - q4**2 + q5**2)**2)**3 + 
                  (108*(q1**2 + q4**2)*(q2*q3 - q4*q5)**2 + 108*(q1*q2 + q4*q5)**2*(q3**2 - q5**2) - 
                     36*(q2*q3 - q4*q5)*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) - 
                     72*(q1**2 + q4**2)*(q3**2 - q5**2)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) + 
                     2*(q2**2 + 2*q1*q3 - q4**2 + q5**2)**3)**2))**(1./3)/
             (3.*2**(1./3)*(q1**2 + q4**2)) + 
            ((-8*(q1*q2 + q4*q5)**3)/(q1**2 + q4**2)**3 + (16*(-(q2*q3) + q4*q5))/(q1**2 + q4**2) + 
               (8*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2))/(q1**2 + q4**2)**2)/
             (4.*sqrt((q1*q2 + q4*q5)**2/(q1**2 + q4**2)**2 - 
                 (2*(q2**2 + 2*q1*q3 - q4**2 + q5**2))/(3.*(q1**2 + q4**2)) + 
                 (2**(1./3)*(-12*(q2*q3 - q4*q5)*(q1*q2 + q4*q5) + 
                      12*(q1**2 + q4**2)*(q3**2 - q5**2) + (q2**2 + 2*q1*q3 - q4**2 + q5**2)**2))/
                  (3.*(q1**2 + q4**2)*(108*(q1**2 + q4**2)*(q2*q3 - q4*q5)**2 + 
                       108*(q1*q2 + q4*q5)**2*(q3**2 - q5**2) - 
                       36*(q2*q3 - q4*q5)*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) - 
                       72*(q1**2 + q4**2)*(q3**2 - q5**2)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) + 
                       2*(q2**2 + 2*q1*q3 - q4**2 + q5**2)**3 + 
                       sqrt(-4*(-12*(q2*q3 - q4*q5)*(q1*q2 + q4*q5) + 
                             12*(q1**2 + q4**2)*(q3**2 - q5**2) + (q2**2 + 2*q1*q3 - q4**2 + q5**2)**2)**3
                           + (108*(q1**2 + q4**2)*(q2*q3 - q4*q5)**2 + 
                            108*(q1*q2 + q4*q5)**2*(q3**2 - q5**2) - 
                            36*(q2*q3 - q4*q5)*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) - 
                            72*(q1**2 + q4**2)*(q3**2 - q5**2)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) + 
                            2*(q2**2 + 2*q1*q3 - q4**2 + q5**2)**3)**2))**(1./3)) + 
                 (108*(q1**2 + q4**2)*(q2*q3 - q4*q5)**2 + 108*(q1*q2 + q4*q5)**2*(q3**2 - q5**2) - 
                     36*(q2*q3 - q4*q5)*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) - 
                     72*(q1**2 + q4**2)*(q3**2 - q5**2)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) + 
                     2*(q2**2 + 2*q1*q3 - q4**2 + q5**2)**3 + 
                     sqrt(-4*(-12*(q2*q3 - q4*q5)*(q1*q2 + q4*q5) + 12*(q1**2 + q4**2)*(q3**2 - q5**2) + 
                           (q2**2 + 2*q1*q3 - q4**2 + q5**2)**2)**3 + 
                       (108*(q1**2 + q4**2)*(q2*q3 - q4*q5)**2 + 108*(q1*q2 + q4*q5)**2*(q3**2 - q5**2) - 
                          36*(q2*q3 - q4*q5)*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) - 
                          72*(q1**2 + q4**2)*(q3**2 - q5**2)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) + 
                          2*(q2**2 + 2*q1*q3 - q4**2 + q5**2)**3)**2))**(1./3)/
                  (3.*2**(1./3)*(q1**2 + q4**2)))))/2.))

def soln6(q1: float, q2: float, q3: float, q4: float, q5: float) -> float:
    return (arccos(-0.5*(q1*q2 + q4*q5)/(q1**2 + q4**2) + 
        sqrt((q1*q2 + q4*q5)**2/(q1**2 + q4**2)**2 - 
           (2*(q2**2 + 2*q1*q3 - q4**2 + q5**2))/(3.*(q1**2 + q4**2)) + 
           (2**(1./3)*(-12*(q2*q3 - q4*q5)*(q1*q2 + q4*q5) + 
                12*(q1**2 + q4**2)*(q3**2 - q5**2) + (q2**2 + 2*q1*q3 - q4**2 + q5**2)**2))/
            (3.*(q1**2 + q4**2)*(108*(q1**2 + q4**2)*(q2*q3 - q4*q5)**2 + 
                 108*(q1*q2 + q4*q5)**2*(q3**2 - q5**2) - 
                 36*(q2*q3 - q4*q5)*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) - 
                 72*(q1**2 + q4**2)*(q3**2 - q5**2)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) + 
                 2*(q2**2 + 2*q1*q3 - q4**2 + q5**2)**3 + 
                 sqrt(-4*(-12*(q2*q3 - q4*q5)*(q1*q2 + q4*q5) + 12*(q1**2 + q4**2)*(q3**2 - q5**2) + 
                       (q2**2 + 2*q1*q3 - q4**2 + q5**2)**2)**3 + 
                   (108*(q1**2 + q4**2)*(q2*q3 - q4*q5)**2 + 108*(q1*q2 + q4*q5)**2*(q3**2 - q5**2) - 
                      36*(q2*q3 - q4*q5)*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) - 
                      72*(q1**2 + q4**2)*(q3**2 - q5**2)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) + 
                      2*(q2**2 + 2*q1*q3 - q4**2 + q5**2)**3)**2))**(1./3)) + 
           (108*(q1**2 + q4**2)*(q2*q3 - q4*q5)**2 + 108*(q1*q2 + q4*q5)**2*(q3**2 - q5**2) - 
               36*(q2*q3 - q4*q5)*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) - 
               72*(q1**2 + q4**2)*(q3**2 - q5**2)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) + 
               2*(q2**2 + 2*q1*q3 - q4**2 + q5**2)**3 + 
               sqrt(-4*(-12*(q2*q3 - q4*q5)*(q1*q2 + q4*q5) + 12*(q1**2 + q4**2)*(q3**2 - q5**2) + 
                     (q2**2 + 2*q1*q3 - q4**2 + q5**2)**2)**3 + 
                 (108*(q1**2 + q4**2)*(q2*q3 - q4*q5)**2 + 108*(q1*q2 + q4*q5)**2*(q3**2 - q5**2) - 
                    36*(q2*q3 - q4*q5)*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) - 
                    72*(q1**2 + q4**2)*(q3**2 - q5**2)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) + 
                    2*(q2**2 + 2*q1*q3 - q4**2 + q5**2)**3)**2))**(1./3)/
            (3.*2**(1./3)*(q1**2 + q4**2)))/2. - 
        sqrt((2*(q1*q2 + q4*q5)**2)/(q1**2 + q4**2)**2 - 
           (4*(q2**2 + 2*q1*q3 - q4**2 + q5**2))/(3.*(q1**2 + q4**2)) - 
           (2**(1./3)*(-12*(q2*q3 - q4*q5)*(q1*q2 + q4*q5) + 
                12*(q1**2 + q4**2)*(q3**2 - q5**2) + (q2**2 + 2*q1*q3 - q4**2 + q5**2)**2))/
            (3.*(q1**2 + q4**2)*(108*(q1**2 + q4**2)*(q2*q3 - q4*q5)**2 + 
                 108*(q1*q2 + q4*q5)**2*(q3**2 - q5**2) - 
                 36*(q2*q3 - q4*q5)*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) - 
                 72*(q1**2 + q4**2)*(q3**2 - q5**2)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) + 
                 2*(q2**2 + 2*q1*q3 - q4**2 + q5**2)**3 + 
                 sqrt(-4*(-12*(q2*q3 - q4*q5)*(q1*q2 + q4*q5) + 12*(q1**2 + q4**2)*(q3**2 - q5**2) + 
                       (q2**2 + 2*q1*q3 - q4**2 + q5**2)**2)**3 + 
                   (108*(q1**2 + q4**2)*(q2*q3 - q4*q5)**2 + 108*(q1*q2 + q4*q5)**2*(q3**2 - q5**2) - 
                      36*(q2*q3 - q4*q5)*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) - 
                      72*(q1**2 + q4**2)*(q3**2 - q5**2)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) + 
                      2*(q2**2 + 2*q1*q3 - q4**2 + q5**2)**3)**2))**(1./3)) - 
           (108*(q1**2 + q4**2)*(q2*q3 - q4*q5)**2 + 108*(q1*q2 + q4*q5)**2*(q3**2 - q5**2) - 
               36*(q2*q3 - q4*q5)*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) - 
               72*(q1**2 + q4**2)*(q3**2 - q5**2)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) + 
               2*(q2**2 + 2*q1*q3 - q4**2 + q5**2)**3 + 
               sqrt(-4*(-12*(q2*q3 - q4*q5)*(q1*q2 + q4*q5) + 12*(q1**2 + q4**2)*(q3**2 - q5**2) + 
                     (q2**2 + 2*q1*q3 - q4**2 + q5**2)**2)**3 + 
                 (108*(q1**2 + q4**2)*(q2*q3 - q4*q5)**2 + 108*(q1*q2 + q4*q5)**2*(q3**2 - q5**2) - 
                    36*(q2*q3 - q4*q5)*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) - 
                    72*(q1**2 + q4**2)*(q3**2 - q5**2)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) + 
                    2*(q2**2 + 2*q1*q3 - q4**2 + q5**2)**3)**2))**(1./3)/
            (3.*2**(1./3)*(q1**2 + q4**2)) + 
           ((-8*(q1*q2 + q4*q5)**3)/(q1**2 + q4**2)**3 + (16*(-(q2*q3) + q4*q5))/(q1**2 + q4**2) + 
              (8*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2))/(q1**2 + q4**2)**2)/
            (4.*sqrt((q1*q2 + q4*q5)**2/(q1**2 + q4**2)**2 - 
                (2*(q2**2 + 2*q1*q3 - q4**2 + q5**2))/(3.*(q1**2 + q4**2)) + 
                (2**(1./3)*(-12*(q2*q3 - q4*q5)*(q1*q2 + q4*q5) + 
                     12*(q1**2 + q4**2)*(q3**2 - q5**2) + (q2**2 + 2*q1*q3 - q4**2 + q5**2)**2))/
                 (3.*(q1**2 + q4**2)*(108*(q1**2 + q4**2)*(q2*q3 - q4*q5)**2 + 
                      108*(q1*q2 + q4*q5)**2*(q3**2 - q5**2) - 
                      36*(q2*q3 - q4*q5)*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) - 
                      72*(q1**2 + q4**2)*(q3**2 - q5**2)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) + 
                      2*(q2**2 + 2*q1*q3 - q4**2 + q5**2)**3 + 
                      sqrt(-4*(-12*(q2*q3 - q4*q5)*(q1*q2 + q4*q5) + 12*(q1**2 + q4**2)*(q3**2 - q5**2) + 
                            (q2**2 + 2*q1*q3 - q4**2 + q5**2)**2)**3 + 
                        (108*(q1**2 + q4**2)*(q2*q3 - q4*q5)**2 + 
                           108*(q1*q2 + q4*q5)**2*(q3**2 - q5**2) - 
                           36*(q2*q3 - q4*q5)*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) - 
                           72*(q1**2 + q4**2)*(q3**2 - q5**2)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) + 
                           2*(q2**2 + 2*q1*q3 - q4**2 + q5**2)**3)**2))**(1./3)) + 
                (108*(q1**2 + q4**2)*(q2*q3 - q4*q5)**2 + 108*(q1*q2 + q4*q5)**2*(q3**2 - q5**2) - 
                    36*(q2*q3 - q4*q5)*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) - 
                    72*(q1**2 + q4**2)*(q3**2 - q5**2)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) + 
                    2*(q2**2 + 2*q1*q3 - q4**2 + q5**2)**3 + 
                    sqrt(-4*(-12*(q2*q3 - q4*q5)*(q1*q2 + q4*q5) + 12*(q1**2 + q4**2)*(q3**2 - q5**2) + 
                          (q2**2 + 2*q1*q3 - q4**2 + q5**2)**2)**3 + 
                      (108*(q1**2 + q4**2)*(q2*q3 - q4*q5)**2 + 108*(q1*q2 + q4*q5)**2*(q3**2 - q5**2) - 
                         36*(q2*q3 - q4*q5)*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) - 
                         72*(q1**2 + q4**2)*(q3**2 - q5**2)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) + 
                         2*(q2**2 + 2*q1*q3 - q4**2 + q5**2)**3)**2))**(1./3)/
                 (3.*2**(1./3)*(q1**2 + q4**2)))))/2.))

def soln7(q1: float, q2: float, q3: float, q4: float, q5: float) -> float:
    return (-arccos(-0.5*(q1*q2 + q4*q5)/(q1**2 + q4**2) + 
         sqrt((q1*q2 + q4*q5)**2/(q1**2 + q4**2)**2 - 
            (2*(q2**2 + 2*q1*q3 - q4**2 + q5**2))/(3.*(q1**2 + q4**2)) + 
            (2**(1./3)*(-12*(q2*q3 - q4*q5)*(q1*q2 + q4*q5) + 
                 12*(q1**2 + q4**2)*(q3**2 - q5**2) + (q2**2 + 2*q1*q3 - q4**2 + q5**2)**2))/
             (3.*(q1**2 + q4**2)*(108*(q1**2 + q4**2)*(q2*q3 - q4*q5)**2 + 
                  108*(q1*q2 + q4*q5)**2*(q3**2 - q5**2) - 
                  36*(q2*q3 - q4*q5)*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) - 
                  72*(q1**2 + q4**2)*(q3**2 - q5**2)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) + 
                  2*(q2**2 + 2*q1*q3 - q4**2 + q5**2)**3 + 
                  sqrt(-4*(-12*(q2*q3 - q4*q5)*(q1*q2 + q4*q5) + 12*(q1**2 + q4**2)*(q3**2 - q5**2) + 
                        (q2**2 + 2*q1*q3 - q4**2 + q5**2)**2)**3 + 
                    (108*(q1**2 + q4**2)*(q2*q3 - q4*q5)**2 + 108*(q1*q2 + q4*q5)**2*(q3**2 - q5**2) - 
                       36*(q2*q3 - q4*q5)*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) - 
                       72*(q1**2 + q4**2)*(q3**2 - q5**2)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) + 
                       2*(q2**2 + 2*q1*q3 - q4**2 + q5**2)**3)**2))**(1./3)) + 
            (108*(q1**2 + q4**2)*(q2*q3 - q4*q5)**2 + 108*(q1*q2 + q4*q5)**2*(q3**2 - q5**2) - 
                36*(q2*q3 - q4*q5)*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) - 
                72*(q1**2 + q4**2)*(q3**2 - q5**2)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) + 
                2*(q2**2 + 2*q1*q3 - q4**2 + q5**2)**3 + 
                sqrt(-4*(-12*(q2*q3 - q4*q5)*(q1*q2 + q4*q5) + 12*(q1**2 + q4**2)*(q3**2 - q5**2) + 
                      (q2**2 + 2*q1*q3 - q4**2 + q5**2)**2)**3 + 
                  (108*(q1**2 + q4**2)*(q2*q3 - q4*q5)**2 + 108*(q1*q2 + q4*q5)**2*(q3**2 - q5**2) - 
                     36*(q2*q3 - q4*q5)*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) - 
                     72*(q1**2 + q4**2)*(q3**2 - q5**2)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) + 
                     2*(q2**2 + 2*q1*q3 - q4**2 + q5**2)**3)**2))**(1./3)/
             (3.*2**(1./3)*(q1**2 + q4**2)))/2. + 
         sqrt((2*(q1*q2 + q4*q5)**2)/(q1**2 + q4**2)**2 - 
            (4*(q2**2 + 2*q1*q3 - q4**2 + q5**2))/(3.*(q1**2 + q4**2)) - 
            (2**(1./3)*(-12*(q2*q3 - q4*q5)*(q1*q2 + q4*q5) + 
                 12*(q1**2 + q4**2)*(q3**2 - q5**2) + (q2**2 + 2*q1*q3 - q4**2 + q5**2)**2))/
             (3.*(q1**2 + q4**2)*(108*(q1**2 + q4**2)*(q2*q3 - q4*q5)**2 + 
                  108*(q1*q2 + q4*q5)**2*(q3**2 - q5**2) - 
                  36*(q2*q3 - q4*q5)*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) - 
                  72*(q1**2 + q4**2)*(q3**2 - q5**2)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) + 
                  2*(q2**2 + 2*q1*q3 - q4**2 + q5**2)**3 + 
                  sqrt(-4*(-12*(q2*q3 - q4*q5)*(q1*q2 + q4*q5) + 12*(q1**2 + q4**2)*(q3**2 - q5**2) + 
                        (q2**2 + 2*q1*q3 - q4**2 + q5**2)**2)**3 + 
                    (108*(q1**2 + q4**2)*(q2*q3 - q4*q5)**2 + 108*(q1*q2 + q4*q5)**2*(q3**2 - q5**2) - 
                       36*(q2*q3 - q4*q5)*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) - 
                       72*(q1**2 + q4**2)*(q3**2 - q5**2)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) + 
                       2*(q2**2 + 2*q1*q3 - q4**2 + q5**2)**3)**2))**(1./3)) - 
            (108*(q1**2 + q4**2)*(q2*q3 - q4*q5)**2 + 108*(q1*q2 + q4*q5)**2*(q3**2 - q5**2) - 
                36*(q2*q3 - q4*q5)*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) - 
                72*(q1**2 + q4**2)*(q3**2 - q5**2)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) + 
                2*(q2**2 + 2*q1*q3 - q4**2 + q5**2)**3 + 
                sqrt(-4*(-12*(q2*q3 - q4*q5)*(q1*q2 + q4*q5) + 12*(q1**2 + q4**2)*(q3**2 - q5**2) + 
                      (q2**2 + 2*q1*q3 - q4**2 + q5**2)**2)**3 + 
                  (108*(q1**2 + q4**2)*(q2*q3 - q4*q5)**2 + 108*(q1*q2 + q4*q5)**2*(q3**2 - q5**2) - 
                     36*(q2*q3 - q4*q5)*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) - 
                     72*(q1**2 + q4**2)*(q3**2 - q5**2)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) + 
                     2*(q2**2 + 2*q1*q3 - q4**2 + q5**2)**3)**2))**(1./3)/
             (3.*2**(1./3)*(q1**2 + q4**2)) + 
            ((-8*(q1*q2 + q4*q5)**3)/(q1**2 + q4**2)**3 + (16*(-(q2*q3) + q4*q5))/(q1**2 + q4**2) + 
               (8*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2))/(q1**2 + q4**2)**2)/
             (4.*sqrt((q1*q2 + q4*q5)**2/(q1**2 + q4**2)**2 - 
                 (2*(q2**2 + 2*q1*q3 - q4**2 + q5**2))/(3.*(q1**2 + q4**2)) + 
                 (2**(1./3)*(-12*(q2*q3 - q4*q5)*(q1*q2 + q4*q5) + 
                      12*(q1**2 + q4**2)*(q3**2 - q5**2) + (q2**2 + 2*q1*q3 - q4**2 + q5**2)**2))/
                  (3.*(q1**2 + q4**2)*(108*(q1**2 + q4**2)*(q2*q3 - q4*q5)**2 + 
                       108*(q1*q2 + q4*q5)**2*(q3**2 - q5**2) - 
                       36*(q2*q3 - q4*q5)*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) - 
                       72*(q1**2 + q4**2)*(q3**2 - q5**2)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) + 
                       2*(q2**2 + 2*q1*q3 - q4**2 + q5**2)**3 + 
                       sqrt(-4*(-12*(q2*q3 - q4*q5)*(q1*q2 + q4*q5) + 
                             12*(q1**2 + q4**2)*(q3**2 - q5**2) + (q2**2 + 2*q1*q3 - q4**2 + q5**2)**2)**3
                           + (108*(q1**2 + q4**2)*(q2*q3 - q4*q5)**2 + 
                            108*(q1*q2 + q4*q5)**2*(q3**2 - q5**2) - 
                            36*(q2*q3 - q4*q5)*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) - 
                            72*(q1**2 + q4**2)*(q3**2 - q5**2)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) + 
                            2*(q2**2 + 2*q1*q3 - q4**2 + q5**2)**3)**2))**(1./3)) + 
                 (108*(q1**2 + q4**2)*(q2*q3 - q4*q5)**2 + 108*(q1*q2 + q4*q5)**2*(q3**2 - q5**2) - 
                     36*(q2*q3 - q4*q5)*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) - 
                     72*(q1**2 + q4**2)*(q3**2 - q5**2)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) + 
                     2*(q2**2 + 2*q1*q3 - q4**2 + q5**2)**3 + 
                     sqrt(-4*(-12*(q2*q3 - q4*q5)*(q1*q2 + q4*q5) + 12*(q1**2 + q4**2)*(q3**2 - q5**2) + 
                           (q2**2 + 2*q1*q3 - q4**2 + q5**2)**2)**3 + 
                       (108*(q1**2 + q4**2)*(q2*q3 - q4*q5)**2 + 108*(q1*q2 + q4*q5)**2*(q3**2 - q5**2) - 
                          36*(q2*q3 - q4*q5)*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) - 
                          72*(q1**2 + q4**2)*(q3**2 - q5**2)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) + 
                          2*(q2**2 + 2*q1*q3 - q4**2 + q5**2)**3)**2))**(1./3)/
                  (3.*2**(1./3)*(q1**2 + q4**2)))))/2.))

def soln8(q1: float, q2: float, q3: float, q4: float, q5: float) -> float:
    return (arccos(-0.5*(q1*q2 + q4*q5)/(q1**2 + q4**2) + 
        sqrt((q1*q2 + q4*q5)**2/(q1**2 + q4**2)**2 - 
           (2*(q2**2 + 2*q1*q3 - q4**2 + q5**2))/(3.*(q1**2 + q4**2)) + 
           (2**(1./3)*(-12*(q2*q3 - q4*q5)*(q1*q2 + q4*q5) + 
                12*(q1**2 + q4**2)*(q3**2 - q5**2) + (q2**2 + 2*q1*q3 - q4**2 + q5**2)**2))/
            (3.*(q1**2 + q4**2)*(108*(q1**2 + q4**2)*(q2*q3 - q4*q5)**2 + 
                 108*(q1*q2 + q4*q5)**2*(q3**2 - q5**2) - 
                 36*(q2*q3 - q4*q5)*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) - 
                 72*(q1**2 + q4**2)*(q3**2 - q5**2)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) + 
                 2*(q2**2 + 2*q1*q3 - q4**2 + q5**2)**3 + 
                 sqrt(-4*(-12*(q2*q3 - q4*q5)*(q1*q2 + q4*q5) + 12*(q1**2 + q4**2)*(q3**2 - q5**2) + 
                       (q2**2 + 2*q1*q3 - q4**2 + q5**2)**2)**3 + 
                   (108*(q1**2 + q4**2)*(q2*q3 - q4*q5)**2 + 108*(q1*q2 + q4*q5)**2*(q3**2 - q5**2) - 
                      36*(q2*q3 - q4*q5)*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) - 
                      72*(q1**2 + q4**2)*(q3**2 - q5**2)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) + 
                      2*(q2**2 + 2*q1*q3 - q4**2 + q5**2)**3)**2))**(1./3)) + 
           (108*(q1**2 + q4**2)*(q2*q3 - q4*q5)**2 + 108*(q1*q2 + q4*q5)**2*(q3**2 - q5**2) - 
               36*(q2*q3 - q4*q5)*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) - 
               72*(q1**2 + q4**2)*(q3**2 - q5**2)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) + 
               2*(q2**2 + 2*q1*q3 - q4**2 + q5**2)**3 + 
               sqrt(-4*(-12*(q2*q3 - q4*q5)*(q1*q2 + q4*q5) + 12*(q1**2 + q4**2)*(q3**2 - q5**2) + 
                     (q2**2 + 2*q1*q3 - q4**2 + q5**2)**2)**3 + 
                 (108*(q1**2 + q4**2)*(q2*q3 - q4*q5)**2 + 108*(q1*q2 + q4*q5)**2*(q3**2 - q5**2) - 
                    36*(q2*q3 - q4*q5)*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) - 
                    72*(q1**2 + q4**2)*(q3**2 - q5**2)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) + 
                    2*(q2**2 + 2*q1*q3 - q4**2 + q5**2)**3)**2))**(1./3)/
            (3.*2**(1./3)*(q1**2 + q4**2)))/2. + 
        sqrt((2*(q1*q2 + q4*q5)**2)/(q1**2 + q4**2)**2 - 
           (4*(q2**2 + 2*q1*q3 - q4**2 + q5**2))/(3.*(q1**2 + q4**2)) - 
           (2**(1./3)*(-12*(q2*q3 - q4*q5)*(q1*q2 + q4*q5) + 
                12*(q1**2 + q4**2)*(q3**2 - q5**2) + (q2**2 + 2*q1*q3 - q4**2 + q5**2)**2))/
            (3.*(q1**2 + q4**2)*(108*(q1**2 + q4**2)*(q2*q3 - q4*q5)**2 + 
                 108*(q1*q2 + q4*q5)**2*(q3**2 - q5**2) - 
                 36*(q2*q3 - q4*q5)*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) - 
                 72*(q1**2 + q4**2)*(q3**2 - q5**2)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) + 
                 2*(q2**2 + 2*q1*q3 - q4**2 + q5**2)**3 + 
                 sqrt(-4*(-12*(q2*q3 - q4*q5)*(q1*q2 + q4*q5) + 12*(q1**2 + q4**2)*(q3**2 - q5**2) + 
                       (q2**2 + 2*q1*q3 - q4**2 + q5**2)**2)**3 + 
                   (108*(q1**2 + q4**2)*(q2*q3 - q4*q5)**2 + 108*(q1*q2 + q4*q5)**2*(q3**2 - q5**2) - 
                      36*(q2*q3 - q4*q5)*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) - 
                      72*(q1**2 + q4**2)*(q3**2 - q5**2)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) + 
                      2*(q2**2 + 2*q1*q3 - q4**2 + q5**2)**3)**2))**(1./3)) - 
           (108*(q1**2 + q4**2)*(q2*q3 - q4*q5)**2 + 108*(q1*q2 + q4*q5)**2*(q3**2 - q5**2) - 
               36*(q2*q3 - q4*q5)*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) - 
               72*(q1**2 + q4**2)*(q3**2 - q5**2)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) + 
               2*(q2**2 + 2*q1*q3 - q4**2 + q5**2)**3 + 
               sqrt(-4*(-12*(q2*q3 - q4*q5)*(q1*q2 + q4*q5) + 12*(q1**2 + q4**2)*(q3**2 - q5**2) + 
                     (q2**2 + 2*q1*q3 - q4**2 + q5**2)**2)**3 + 
                 (108*(q1**2 + q4**2)*(q2*q3 - q4*q5)**2 + 108*(q1*q2 + q4*q5)**2*(q3**2 - q5**2) - 
                    36*(q2*q3 - q4*q5)*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) - 
                    72*(q1**2 + q4**2)*(q3**2 - q5**2)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) + 
                    2*(q2**2 + 2*q1*q3 - q4**2 + q5**2)**3)**2))**(1./3)/
            (3.*2**(1./3)*(q1**2 + q4**2)) + 
           ((-8*(q1*q2 + q4*q5)**3)/(q1**2 + q4**2)**3 + (16*(-(q2*q3) + q4*q5))/(q1**2 + q4**2) + 
              (8*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2))/(q1**2 + q4**2)**2)/
            (4.*sqrt((q1*q2 + q4*q5)**2/(q1**2 + q4**2)**2 - 
                (2*(q2**2 + 2*q1*q3 - q4**2 + q5**2))/(3.*(q1**2 + q4**2)) + 
                (2**(1./3)*(-12*(q2*q3 - q4*q5)*(q1*q2 + q4*q5) + 
                     12*(q1**2 + q4**2)*(q3**2 - q5**2) + (q2**2 + 2*q1*q3 - q4**2 + q5**2)**2))/
                 (3.*(q1**2 + q4**2)*(108*(q1**2 + q4**2)*(q2*q3 - q4*q5)**2 + 
                      108*(q1*q2 + q4*q5)**2*(q3**2 - q5**2) - 
                      36*(q2*q3 - q4*q5)*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) - 
                      72*(q1**2 + q4**2)*(q3**2 - q5**2)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) + 
                      2*(q2**2 + 2*q1*q3 - q4**2 + q5**2)**3 + 
                      sqrt(-4*(-12*(q2*q3 - q4*q5)*(q1*q2 + q4*q5) + 12*(q1**2 + q4**2)*(q3**2 - q5**2) + 
                            (q2**2 + 2*q1*q3 - q4**2 + q5**2)**2)**3 + 
                        (108*(q1**2 + q4**2)*(q2*q3 - q4*q5)**2 + 
                           108*(q1*q2 + q4*q5)**2*(q3**2 - q5**2) - 
                           36*(q2*q3 - q4*q5)*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) - 
                           72*(q1**2 + q4**2)*(q3**2 - q5**2)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) + 
                           2*(q2**2 + 2*q1*q3 - q4**2 + q5**2)**3)**2))**(1./3)) + 
                (108*(q1**2 + q4**2)*(q2*q3 - q4*q5)**2 + 108*(q1*q2 + q4*q5)**2*(q3**2 - q5**2) - 
                    36*(q2*q3 - q4*q5)*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) - 
                    72*(q1**2 + q4**2)*(q3**2 - q5**2)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) + 
                    2*(q2**2 + 2*q1*q3 - q4**2 + q5**2)**3 + 
                    sqrt(-4*(-12*(q2*q3 - q4*q5)*(q1*q2 + q4*q5) + 12*(q1**2 + q4**2)*(q3**2 - q5**2) + 
                          (q2**2 + 2*q1*q3 - q4**2 + q5**2)**2)**3 + 
                      (108*(q1**2 + q4**2)*(q2*q3 - q4*q5)**2 + 108*(q1*q2 + q4*q5)**2*(q3**2 - q5**2) - 
                         36*(q2*q3 - q4*q5)*(q1*q2 + q4*q5)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) - 
                         72*(q1**2 + q4**2)*(q3**2 - q5**2)*(q2**2 + 2*q1*q3 - q4**2 + q5**2) + 
                         2*(q2**2 + 2*q1*q3 - q4**2 + q5**2)**3)**2))**(1./3)/
                 (3.*2**(1./3)*(q1**2 + q4**2)))))/2.))